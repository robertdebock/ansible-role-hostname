---
# tasks file for hostname

- name: Import assert.yml
  ansible.builtin.import_tasks: assert.yml
  run_once: yes
  delegate_to: localhost

- name: Install requirements
  ansible.builtin.package:
    name: "{{ hostname_requirements }}"
    state: present

- name: Set hostname
  ansible.builtin.hostname:
    name: "{{ hostname }}"
  notify:
    - reboot
    - gather facts
  when:
    - ansible_connection not in [ "container", "docker", "community.docker.docker" ]

- name: Gather facts on newly created machines
  ansible.builtin.setup:
  register: hostsfacts

- name: Host file configuration for ipv4
  ansible.builtin.include_tasks: host.yml
  vars:
    host: "{{ hostname }}"
  loop: "{{ hostsfacts.ansible_facts.ansible_all_ipv4_addresses | default([]) | reject('match', '^.*\\.1$') }}"
  # exclude addresses that endswith 1 because they usually
  loop_control:
    loop_var: ip
  when:
    - handle_ipv4
    - ansible_facts['virtualization_type'] is not defined and ansible_facts['virtualization_type'] not in ['container']

- name: Host file configuration for ipv6
  ansible.builtin.include_tasks: host.yml
  vars:
    host: "{{ hostname }}"
  loop: "{{ hostsfacts.ansible_facts.ansible_all_ipv6_addresses | default([]) }}"
  loop_control:
    loop_var: ip
  when:
    - handle_ipv6
    - ansible_facts['virtualization_type'] is not defined and ansible_facts['virtualization_type'] not in ['container']
