---
# tasks file for hostname

- name: Import assert.yml
  ansible.builtin.import_tasks: assert.yml
  run_once: yes
  delegate_to: localhost

- name: Install requirements
  ansible.builtin.package:
    name: "{{ hostname_requirements }}"
    state: present

- name: Set hostname
  ansible.builtin.hostname:
    name: "{{ hostname }}"
  notify:
    - Reboot
    - Gather facts
  when:
    - ansible_facts['virtualization_type'] is not defined or ansible_facts['virtualization_type'] not in ['container']
    - hostname is defined

- name: Gather facts on newly created machines
  ansible.builtin.setup:
  register: hostsfacts

- name: Compute ip4 if preferred_nic is not set
  ansible.builtin.debug:
    msg: "{{ [hostsfacts.ansible_facts['ansible_' + preferred_nic | replace('-', '_')].ipv4.address] if preferred_nic is defined else ([hostsfacts.ansible_facts.ansible_default_ipv4.address] if hostsfacts.ansible_facts.ansible_default_ipv4.address is defined else hostsfacts.ansible_facts.ansible_all_ipv4_addresses | default([])) | reject('match', '^.*\\.1$') }}"
  when:
    - handle_ipv4
    - ansible_facts['virtualization_type'] is not defined or ansible_facts['virtualization_type'] not in ['container']
  register: current_host_ip4s

- name: Host file configuration for ipv4
  ansible.builtin.include_tasks: host.yml
  vars:
    host: "{{ hostname }}"
  loop: "{{ current_host_ip4s.msg | list }}"
  # exclude addresses that endswith 1 because they usually
  loop_control:
    loop_var: ip
  when:
    - handle_ipv4
    - ansible_facts['virtualization_type'] is not defined or ansible_facts['virtualization_type'] not in ['container']

- name: Compute ip6 if preferred_nic is not set
  ansible.builtin.debug:
    msg: "{{ [hostsfacts.ansible_facts['ansible_' + preferred_nic | replace('-', '_')].ipv6.address] if preferred_nic is defined and hostsfacts.ansible_facts['ansible_' + preferred_nic | replace('-', '_')].ipv6.address is defined else ([hostsfacts.ansible_facts.ansible_default_ipv6.address] if hostsfacts.ansible_facts.ansible_default_ipv6.address is defined else hostsfacts.ansible_facts.ansible_all_ipv6_addresses | default([])) }}"
  register: current_host_ip6s

- name: Host file configuration for ipv6
  ansible.builtin.include_tasks: host.yml
  vars:
    host: "{{ hostname }}"
  loop: "{{ current_host_ip6s.msg | list }}"
  loop_control:
    loop_var: ip
  when:
    - handle_ipv6
    - ansible_facts['virtualization_type'] is not defined or ansible_facts['virtualization_type'] not in ['container']
